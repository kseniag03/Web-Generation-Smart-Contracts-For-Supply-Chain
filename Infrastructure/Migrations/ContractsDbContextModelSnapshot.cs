// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ContractsDbContext))]
    partial class ContractsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Actionlog", b =>
                {
                    b.Property<int>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_log");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLog"));

                    b.Property<string>("ActionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action_status");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int?>("IdContract")
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("IdLog")
                        .HasName("actionlog_pkey");

                    b.HasIndex("IdContract");

                    b.HasIndex("IdUser");

                    b.ToTable("actionlog", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_role");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdRole"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("IdRole")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "RoleName" }, "roles_role_name_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Smartcontract", b =>
                {
                    b.Property<int>("IdContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContract"));

                    b.Property<string>("ContractAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contract_address");

                    b.Property<string>("ContractData")
                        .HasColumnType("text")
                        .HasColumnName("contract_data");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GuidContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid_contract")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<int?>("IdWallet")
                        .HasColumnType("integer")
                        .HasColumnName("id_wallet");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("IdContract")
                        .HasName("smartcontract_pkey");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdWallet");

                    b.ToTable("smartcontract", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("firstname");

                    b.Property<string>("GitHubId")
                        .HasColumnType("text")
                        .HasColumnName("github_id");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lastname");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.HasKey("IdUser")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Userauth", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("IdUser")
                        .HasName("userauth_pkey");

                    b.ToTable("userauth", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Wallet", b =>
                {
                    b.Property<int>("IdWallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wallet");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdWallet"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("IdWallet")
                        .HasName("wallet_pkey");

                    b.HasIndex("IdUser");

                    b.HasIndex(new[] { "Address" }, "wallet_address_key")
                        .IsUnique();

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("Userrole", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer")
                        .HasColumnName("id_role");

                    b.HasKey("IdUser", "IdRole")
                        .HasName("userrole_pkey");

                    b.HasIndex("IdRole");

                    b.ToTable("userrole", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Actionlog", b =>
                {
                    b.HasOne("Core.Entities.Smartcontract", "IdContractNavigation")
                        .WithMany("Actionlogs")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("actionlog_id_contract_fkey");

                    b.HasOne("Core.Entities.User", "IdUserNavigation")
                        .WithMany("Actionlogs")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("actionlog_id_user_fkey");

                    b.Navigation("IdContractNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Core.Entities.Smartcontract", b =>
                {
                    b.HasOne("Core.Entities.User", "IdUserNavigation")
                        .WithMany("Smartcontracts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("smartcontract_id_user_fkey");

                    b.HasOne("Core.Entities.Wallet", "IdWalletNavigation")
                        .WithMany("Smartcontracts")
                        .HasForeignKey("IdWallet")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("smartcontract_id_wallet_fkey");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdWalletNavigation");
                });

            modelBuilder.Entity("Core.Entities.Userauth", b =>
                {
                    b.HasOne("Core.Entities.User", "IdUserNavigation")
                        .WithOne("Userauth")
                        .HasForeignKey("Core.Entities.Userauth", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userauth_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Core.Entities.Wallet", b =>
                {
                    b.HasOne("Core.Entities.User", "IdUserNavigation")
                        .WithMany("Wallets")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("wallet_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Userrole", b =>
                {
                    b.HasOne("Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userrole_id_role_fkey");

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userrole_id_user_fkey");
                });

            modelBuilder.Entity("Core.Entities.Smartcontract", b =>
                {
                    b.Navigation("Actionlogs");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("Actionlogs");

                    b.Navigation("Smartcontracts");

                    b.Navigation("Userauth");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Core.Entities.Wallet", b =>
                {
                    b.Navigation("Smartcontracts");
                });
#pragma warning restore 612, 618
        }
    }
}
