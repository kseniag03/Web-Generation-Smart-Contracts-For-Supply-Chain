@namespace WebApp.Components.Pages.Generator
@using System.Text.Json
@using Application.DTOs
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider Auth
@inject IJSRuntime JS

@if (ShowButtons)
{
    <div class="button-container">

        <div class="tooltip-container">
            <button class="custom-btn" @onclick="RunDeploy" disabled="@(!canDeploy)"> Deploy </button>

            @if (!canDeploy)
            {
                <span class="tooltip-text">You do not have access to this functionality</span>
            }
        </div>

        <div class="tooltip-container">
            <button class="custom-btn" @onclick="RunAudit" disabled="@(!canAudit)"> Audit </button>

            @if (!canAudit)
            {
                <span class="tooltip-text">You do not have access to this functionality</span>
            }
        </div>

        <div class="tooltip-container">
            <button class="custom-btn" @onclick="RunGasReport" disabled="@(!canTest)"> Gas </button>

            @if (!canTest)
            {
                <span class="tooltip-text">You do not have access to this functionality</span>
            }
        </div>

        <div class="tooltip-container">
            <button class="custom-btn" @onclick="RunTesting" disabled="@(!canTest)"> Testing </button>

            @if (!canTest)
            {
                <span class="tooltip-text">You do not have access to this functionality</span>
            }
        </div>

        <button class="custom-btn" @onclick="RunCompile">Compile</button>

    </div>

    @if (testingOutput.Count > 0)
    {
        <div class="output-container">
            <pre><code class="language-shell">@string.Join("\n", testingOutput)</code></pre>
        </div>
    }
}

@code {
    [Parameter] public ContractParamsDto Model { get; set; } = new();

    [Parameter] public bool ShowButtons { get; set; }
    
    /*
    [Parameter] public EventCallback OnDeploy { get; set; }
    [Parameter] public EventCallback OnAudit { get; set; }
    [Parameter] public EventCallback OnTest { get; set; }
    [Parameter] public EventCallback OnGasReport { get; set; }
    [Parameter] public EventCallback OnCompile { get; set; }*/

    private List<string> testingOutput = new();

    private UserDto? user;
    private bool canTest, canAudit, canDeploy;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var state = await Auth.GetAuthenticationStateAsync();
            var isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                user = new UserDto
                {
                    Login = state.User.Identity!.Name!,
                    Email = state.User.FindFirst("urn:email:login")?.Value,
                    Role = state.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "user",
                    GitHubId = state.User.FindFirst("urn:github:login")?.Value,
                    WalletAddress = state.User.FindFirst("urn:wallet:address")?.Value
                };

                canTest = IsInRole(user, "Tester", "Auditor", "Deployer", "Admin");
                canAudit = IsInRole(user, "Auditor", "Deployer", "Admin");
                canDeploy = IsInRole(user, "Deployer", "Admin");
            }
        }
        catch (Exception ex)
        {
            var message = ex.Message;
        }
    }

    private bool IsInRole(UserDto user, params string[] roles) =>
        roles.Any(r => r.Equals(user.Role, StringComparison.OrdinalIgnoreCase));

    private async Task RunCompile()
    {
        testingOutput.Clear();
        testingOutput.Add("Compiling contract...");

        try
        {
            var doc = await JS.InvokeAsync<JsonElement>(
                "sendRequestViaBrowser",
                "/api/contracts/compile",
                Model);

            var text = doc.GetProperty("output").GetString();

            testingOutput.AddRange(
                text?.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
                ?? new[] { "[No output]" });
        }
        catch (JSException jsEx)
        {
            testingOutput.Add($"RunCompile JS error: {jsEx}");
            Console.Error.WriteLine($"RunCompile JS error: {jsEx}");
        }
        catch (Exception ex)
        {
            testingOutput.Add($"RunCompile error: {ex}");
            Console.Error.WriteLine($"RunCompile error: {ex}");
        }
    }

    private async Task RunTesting()
    {
        testingOutput.Clear();
        testingOutput.Add("Launching Hardhat testing...");

        try
        {
            var doc = await JS.InvokeAsync<JsonElement>(
                "sendRequestViaBrowser",
                "/api/contracts/test",
                Model);

            var text = doc.GetProperty("output").GetString();

            testingOutput.AddRange(
                text?.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
                ?? new[] { "[No output]" });
        }
        catch (JSException jsEx)
        {
            testingOutput.Add($"RunTesting JS error: {jsEx}");
            Console.Error.WriteLine($"RunTesting JS error: {jsEx}");
        }
        catch (Exception ex)
        {
            testingOutput.Add($"RunTesting error: {ex}");
            Console.Error.WriteLine($"RunTesting error: {ex}");
        }
    }

    private async Task RunGasReport()
    {
        testingOutput.Clear();
        testingOutput.Add("Launching Foundry testing...");

        try
        {
            var doc = await JS.InvokeAsync<JsonElement>(
                "sendRequestViaBrowser",
                "/api/contracts/gas-report",
                Model);

            var text = doc.GetProperty("output").GetString();

            testingOutput.AddRange(
                text?.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
                ?? new[] { "[No output]" });
        }
        catch (JSException jsEx)
        {
            testingOutput.Add($"RunGasReport JS error: {jsEx}");
            Console.Error.WriteLine($"RunGasReport JS error: {jsEx}");
        }
        catch (Exception ex)
        {
            testingOutput.Add($"RunGasReport error: {ex}");
            Console.Error.WriteLine($"RunGasReport error: {ex}");
        }
    }

    private async Task RunAudit()
    {
        testingOutput.Clear();
        testingOutput.Add("Launching Slither audit...");

        try
        {
            var doc = await JS.InvokeAsync<JsonElement>(
                "sendRequestViaBrowser",
                "/api/contracts/audit",
                Model);

            var text = doc.GetProperty("output").GetString();

            testingOutput.AddRange(
                text?.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
                ?? new[] { "[No output]" });
        }
        catch (JSException jsEx)
        {
            testingOutput.Add($"RunAudit JS error: {jsEx}");
            Console.Error.WriteLine($"RunAudit JS error: {jsEx}");
        }
        catch (Exception ex)
        {
            testingOutput.Add($"RunAudit error: {ex}");
            Console.Error.WriteLine($"RunAudit error: {ex}");
        }
    }

    private async Task RunDeploy()
    {
        if (user is null || string.IsNullOrEmpty(user.WalletAddress))
        {
            testingOutput.Add($"The user or his Metamask wallet was not found, the deployment is not possible");

            return;
        }

        testingOutput.Clear();
        testingOutput.Add("Connecting to MetaMask and launching deployment...");

        try
        {
            var result = await JS.InvokeAsync<AbiBytecodeDto>(
                "sendRequestViaBrowser",
                "/api/contracts/abi-bytecode",
                Model);

            if (result is null || result.Abi is null || string.IsNullOrEmpty(result.Bytecode))
            {
                testingOutput.Add($"Abi and Bytecode were not found, deployment is not possible");

                return;
            }

            var abi = result.Abi;
            var bytecode = result.Bytecode;
            var constructorArgs = new object[]
            {
                user.WalletAddress
            };

            try
            {
                var deployedAddress = await JS.InvokeAsync<string>(
                    "deployFunctions.deployWithMetaMask",
                    abi, bytecode, constructorArgs
                );

                if (deployedAddress.StartsWith("ERROR"))
                {
                    testingOutput.Add($"Error: {deployedAddress}");
                }
                else
                {
                    testingOutput.Add($"The contract has been successfully signed at: {deployedAddress}");
                }
            }
            catch (Exception ex)
            {
                testingOutput.Add($"Caught exception: {ex.Message}");
                throw;
            }
        }
        catch (JSException jsEx)
        {
            testingOutput.Add($"RunDeploy JS error: {jsEx}");
            Console.Error.WriteLine($"RunDeploy JS error: {jsEx}");
        }
        catch (Exception ex)
        {
            testingOutput.Add($"RunDeploy error: {ex}");
            Console.Error.WriteLine($"RunDeploy error: {ex}");
        }
    }
}