@page "/generator"
@rendermode InteractiveServer
@using Application.Common
@using Application.DTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@using WebApp.Components.Pages.Generator
@inject IJSRuntime JS

<h1>Generate Smart Contract</h1>

@if (errorMessages.Any())
{
	<div class="alert alert-danger" role="alert">
		<ul class="mb-0">
			@foreach (var err in errorMessages)
			{
				<li>@err</li>
			}
		</ul>
	</div>
}

<div class="main-container">

	<div class="left-panel">

		<button class="custom-btn" @onclick="HandleGenerate">Generate</button>

		<EditorTabs Model="@Model"
		ShowResults="@ShowResults"
		Tabs="@Tabs"
		TabContents="@TabContents"
		ActiveTab="@ActiveTab"
		IsEditing="@IsEditing"
		OnEditToggle="@OnEditToggle"
		OnTabSelected="@OnTabSelected"
		OnCodeChanged="@UpdateTabContent" />
	</div>

	<div class="right-panel">
		<RightPanel Model="Model"
		YamlContent="@YamlContent"
		ShowYamlEditor="ShowYamlEditor"
		CanSetup="CanSetup"
		OnSetup="HandleSetup"
		OnYamlChanged="OnYamlChanged" />
	</div>

</div>
<div class="main-container">
</div>

@code {
	private ContractParamsDto Model = new();

	private bool CanSetup => !string.IsNullOrEmpty(Model.Area);
	private bool ShowYamlEditor;
	private bool ShowResults;
	private bool IsEditing;
	private int ActiveTab;
	private string YamlContent = AppConstants.DefaultYamlContent;

	private string[] Tabs = { "Contract", "Test", "Gas Report" };
	private string[] TabContents = new string[3] { "", "", "" };

	private Dictionary<string, string> InitialTabContents = new();

	private List<string> errorMessages = new();

	private async Task HandleSetup()
	{
		errorMessages.Clear();

		try
		{
			var doc = await JS.InvokeAsync<JsonElement>(
				"sendRequestViaBrowser",
				"/api/contracts/setup",
				Model
			);

			YamlContent = doc.GetProperty("yaml").GetString() ?? AppConstants.DefaultYamlContent;
			ShowYamlEditor = true;
		}
		catch (JSException jsEx)
		{
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"HandleSetup error: {ex}");
		}
	}

	private void OnYamlChanged(string newYaml)
	{
		YamlContent =
			string.IsNullOrEmpty(newYaml) || string.IsNullOrWhiteSpace(newYaml)
			? AppConstants.DefaultYamlContent
			: newYaml;
	}

	private async Task HandleGenerate()
	{
		errorMessages.Clear();

		try
		{
			Model.LayoutYaml = YamlContent;

			var data = await JS.InvokeAsync<JsonElement>(
				"sendRequestViaBrowser",
				"/api/contracts/generate",
				Model
			);

			TabContents[0] = data.GetProperty("code").GetString() ?? "";
			TabContents[1] = data.GetProperty("testScript").GetString() ?? "";
			TabContents[2] = data.GetProperty("gasReport").GetString() ?? "";

			InitialTabContents[AppConstants.ContractSbn] = TabContents[0];
			InitialTabContents[AppConstants.TestSbn] = TabContents[1];
			InitialTabContents[AppConstants.TestGasSbn] = TabContents[2];

			ShowResults = true;
			IsEditing = false;
		}
		catch (JSException jsEx)
		{
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"HandleGenerate error: {ex}");
		}
	}

	private void OnTabSelected(int idx)
	{
		ActiveTab = idx;
		IsEditing = false;
	}

	private async Task OnEditToggle()
	{
		if (IsEditing)
		{
			var updateDto = new ContractUpdateDto
			{
				Current = Model
			};

			if (InitialTabContents.TryGetValue(AppConstants.ContractSbn, out var originalCode) &&
				originalCode != TabContents[0])
			{
				updateDto.UpdatedCode = TabContents[0];
			}

			if (InitialTabContents.TryGetValue(AppConstants.TestSbn, out var originalTest) &&
				originalTest != TabContents[1])
			{
				updateDto.UpdatedTestScript = TabContents[1];
			}

			if (InitialTabContents.TryGetValue(AppConstants.TestGasSbn, out var originalGas) &&
				originalGas != TabContents[2])
			{
				updateDto.UpdatedGasScript = TabContents[2];
			}

			try
			{
				_ = await JS.InvokeAsync<JsonElement>(
					"sendRequestViaBrowser",
					"/api/contracts/update-code",
					updateDto
				);
			}
			catch (JSException jsEx)
			{
				HandleJsError(jsEx.Message);
			}
			catch (Exception ex)
			{
				Console.Error.WriteLine($"OnEditToggle error: {ex}");
			}

			InitialTabContents[AppConstants.ContractSbn] = TabContents[0];
			InitialTabContents[AppConstants.TestSbn] = TabContents[1];
			InitialTabContents[AppConstants.TestGasSbn] = TabContents[2];

			IsEditing = false;
		}
		else
		{
			IsEditing = true;
		}
	}

	private Task UpdateTabContent((int tab, string code) update)
	{
		TabContents[update.tab] = update.code;
		return Task.CompletedTask;
	}

	private void HandleJsError(string jsExMessage)
	{
		try
		{
			var problem = JsonSerializer.Deserialize<ValidationProblemDetails>(
				jsExMessage,
				new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
			);

			if (problem?.Errors != null && problem.Errors.Any())
			{
				errorMessages = problem.Errors
				.SelectMany(kv => kv.Value)
				.Select(m => m.Trim())
				.ToList();
			}
			else
			{
				errorMessages.Add(jsExMessage);
			}
		}
		catch
		{
			errorMessages.Add(jsExMessage);
		}

		Console.Error.WriteLine(jsExMessage);
	}
}
