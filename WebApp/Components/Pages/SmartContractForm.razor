@using Application.DTOs
@using System.Text.Json
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS

<div class="main-container">
    <!-- Левая панель -->
    <div class="left-panel">
        <h3>Generate Smart Contract</h3>

        <input @bind="contractName" @bind:event="oninput" placeholder="Enter contract name" />

        <button class="custom-btn" @onclick="GenerateContract">Generate</button>

        @if (!string.IsNullOrWhiteSpace(responseMessage))
        {
            <div class="code-container">
                @if (isEditing)
                {
                    <textarea @bind="responseMessage" class="code-editor"></textarea>
                }
                else
                {
                    <pre @ref="codeContainer"><code class="language-solidity">@responseMessage</code></pre>
                }
                <button class="copy-btn" @onclick="CopyToClipboard">📋 Copy</button>
            </div>

            <!-- Блок кнопок -->
            <div class="button-container">

                <div class="tooltip-container">
                    <button class="custom-btn" @onclick="RunDeploy" disabled="@(!canDeploy)">
                        Deploy
                    </button>
                    @if (!canDeploy)
                    {
                        <span class="tooltip-text">Недостаточно прав</span>
                    }
                </div>

                <div class="tooltip-container">
                    <button class="custom-btn" @onclick="RunAudit" disabled="@(!canAudit)">
                        Audit
                    </button>
                    @if (!canAudit)
                    {
                        <span class="tooltip-text">Недостаточно прав</span>
                    }
                </div>

                <div class="tooltip-container">
                    <button class="custom-btn" @onclick="RunTesting" disabled="@(!canTest)">
                        Testing
                    </button>
                    @if (!canTest)
                    {
                        <span class="tooltip-text">Недостаточно прав</span>
                    }
                </div>

                <button class="custom-btn" @onclick="ToggleEdit">@editButtonText</button>

            </div>

            <!-- Поле вывода Testing -->
            @if (testingOutput.Count > 0)
            {
                <div class="output-container">
                    <pre><code class="language-shell">@string.Join("\n", testingOutput)</code></pre>
                </div>
            }
        }
    </div>

    <!-- Правая панель -->
    <div class="right-panel">
        <h3>Contract Parameters</h3>

        <!-- Выбор области применения -->
        <label>Area of Application:</label>
        <select @bind="selectedApplicationArea">
            @foreach (var app in applicationAreaOptions)
            {
                <option value="@app">@app</option>
            }
        </select>

        <!-- Включение событий -->
        <label>Enable Events:</label>
        <input type="checkbox" @bind="enableEvents" />

        <!-- Выбор типа uint -->
        <label>Storage for ID:</label>
        <select @bind="selectedUintType">
            @foreach (var uintType in uintOptions)
            {
                <option value="@uintType">@uintType</option>
            }
        </select>

        <!-- Опциональное поле void Label -->
        <label>Include void Label:</label>
        <input type="checkbox" @bind="includeVoidLabel" />

        <!-- Выбор ОС -->
        <label>Target OS:</label>
        <select @bind="selectedOs">
            <option value="unix">Unix (default)</option>
            <option value="windows">Windows</option>
        </select>
    </div>
</div>

@code {
    private ElementReference codeContainer;
    private string responseMessage = "";
    private string contractName = "";

    private bool isEditing = false;
    private string editButtonText = "Edit";
    private List<string> testingOutput = new();

    private string selectedApplicationArea = "IoT";
    private bool enableEvents = true;
    private string selectedUintType = "uint256";
    private bool includeVoidLabel = true;
    private string selectedOs = "unix";

    private UserModel user = new();
    private bool canTest, canAudit, canDeploy;

    private readonly List<string> applicationAreaOptions = new() { "IoT", "Pharmaceutics" };
    private readonly List<string> uintOptions = new() { "uint8", "uint16", "uint32", "uint64", "uint128", "uint256" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("with-cookies");
            var response = await client.GetAsync("/api/auth/me");

            if (response.IsSuccessStatusCode)
            {
                var userModel = await response.Content.ReadFromJsonAsync<UserModel>();

                if (userModel is null) {
                    return;
                }

                user = userModel;

                canTest = IsInRole(user, "Tester", "Auditor", "Deployer", "Admin");
                canAudit = IsInRole(user, "Auditor", "Deployer", "Admin");
                canDeploy = IsInRole(user, "Deployer", "Admin");
            }
        }
        catch
        {
        }
    }

    private async Task GenerateContract()
    {
        Console.WriteLine("Кнопка нажата!");

        isEditing = true;
        testingOutput.Clear();
        responseMessage = "Processing...";
        StateHasChanged();

        var contractParams = new ContractParams
        {
            ContractName = contractName,
            ApplicationArea = selectedApplicationArea,
            UintType = selectedUintType,
            EnableEvents = enableEvents,
            IncludeVoidLabel = includeVoidLabel,
            TargetOs = selectedOs
        };

        try
        {
            var client = ClientFactory.CreateClient("with-cookies");
            var result = await client.PostAsJsonAsync("/api/contracts/generate", contractParams);

            if (result.IsSuccessStatusCode)
            {
                var contractResponse = await result.Content.ReadFromJsonAsync<ContractResponse>();

                isEditing = false;

                await Task.Delay(50);

                if (contractResponse is not null && !string.IsNullOrEmpty(contractResponse.Code))
                {
                    responseMessage = $"{contractResponse.Code}";
                }
                else
                {
                    responseMessage = $"Error during contract {contractResponse?.ContractName} generation: empty code";
                }

                StateHasChanged();

                await JS.InvokeVoidAsync("highlightPrism");
                await JS.InvokeVoidAsync("reRenderCode", codeContainer);

            }
            else
            {
                responseMessage = "Error generating contract.";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"Ошибка: {ex.Message}";
        }
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", responseMessage);
    }
    /*
    private async Task RunTesting()
        {
        testingOutput.Clear();
        testingOutput.Add("Running tests...");
        await Task.Delay(1000);

        testingOutput.Add("Test 1: ✔ Passed");
        testingOutput.Add("Test 2: ✔ Passed");
        testingOutput.Add("Test 3: ✘ Failed (Gas exceeded)");
    }
    */
    private async Task RunTesting()
    {
        testingOutput.Clear();
        testingOutput.Add("Запуск тестирования...");

        var contractParams = BuildContractParams();

        try
        {
            var client = ClientFactory.CreateClient("with-cookies");
            var result = await client.PostAsJsonAsync("/api/contracts/test", contractParams);

            if (result.IsSuccessStatusCode)
            {
                var output = await result.Content.ReadFromJsonAsync<JsonElement>();
                var text = output.GetProperty("output").ToString();

                testingOutput.AddRange(text.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries));
            }
            else
            {
                var error = await result.Content.ReadAsStringAsync();
                testingOutput.Add($"Ошибка: {result.StatusCode} — {error}");
            }
        }
        catch (Exception ex)
        {
            testingOutput.Add($"Исключение: {ex.Message}");
        }
    }

    private async Task RunAudit()
    {
        testingOutput.Clear();
        testingOutput.Add("Запуск аудита...");

        var contractParams = BuildContractParams();

        try
        {
            var client = ClientFactory.CreateClient("with-cookies");
            var result = await client.PostAsJsonAsync("/api/contracts/audit", contractParams);

            if (result.IsSuccessStatusCode)
            {
                var message = await result.Content.ReadAsStringAsync();
                testingOutput.Add(message);
            }
            else
            {
                var error = await result.Content.ReadAsStringAsync();
                testingOutput.Add($"Ошибка аудита: {result.StatusCode} — {error}");
            }
        }
        catch (Exception ex)
        {
            testingOutput.Add($"Исключение аудита: {ex.Message}");
        }
    }

    private async Task RunDeploy()
    {
        testingOutput.Clear();
        testingOutput.Add("Подключение к MetaMask и деплой...");

        if (user is null || string.IsNullOrEmpty(user.WalletAddress))
        {
            testingOutput.Add($"Не найден пользователь или его Metamask кошелек, деплой невозможен");

            return;
        }

        var client = ClientFactory.CreateClient("with-cookies");
        var result = await client.GetFromJsonAsync<AbiBytecodeModel>("/api/contracts/abi-bytecode/{contractName}");
        
        if (result is null || string.IsNullOrEmpty(result.Abi) || string.IsNullOrEmpty(result.Bytecode))
        {
            testingOutput.Add($"Не найдены Abi и Bytecode, деплой невозможен");

            return;
        }

        var abi = result.Abi;
        var bytecode = result.Bytecode;
        var constructorArgs = new object[]
        {
            user.WalletAddress
        };

        try
        {
            var deployedAddress = await JS.InvokeAsync<string>(
                "deployFunctions.deployWithMetaMask",
                abi, bytecode, constructorArgs
            );

            if (deployedAddress.StartsWith("ERROR"))
            {
                testingOutput.Add("Ошибка: " + deployedAddress);
            }
            else
            {
                testingOutput.Add("Контракт успешно задеплоен по адресу:");
                testingOutput.Add(deployedAddress);
            }
        }
        catch (Exception ex)
        {
            testingOutput.Add($"Исключение при деплое: {ex.Message}");
        }
    }


    private async Task ToggleEdit()
    {
        isEditing = !isEditing;
        editButtonText = isEditing ? "Save" : "Edit";

        if (!isEditing)
        {
            Console.WriteLine("Edited contract saved: " + responseMessage);

            await Task.Delay(50);
            await JS.InvokeVoidAsync("highlightPrism");
        }
    }

    private ContractParams BuildContractParams() => new()
        {
            ContractName = contractName,
            ApplicationArea = selectedApplicationArea,
            UintType = selectedUintType,
            EnableEvents = enableEvents,
            IncludeVoidLabel = includeVoidLabel,
            TargetOs = selectedOs
        };

    private bool IsInRole(UserModel user, params string[] roles) =>
        roles.Any(r => r.Equals(user.Role, StringComparison.OrdinalIgnoreCase));

    private class ContractResponse
    {
        public string ContractName { get; set; } = "DefaultContractName";
        public string? Code { get; set; }
    }

    private class ContractParams
    {
        public string ContractName { get; set; } = "DefaultContractName";
        public string? ApplicationArea { get; set; }
        public string? UintType { get; set; }
        public bool EnableEvents { get; set; }
        public bool IncludeVoidLabel { get; set; }
        public string? TargetOs { get; set; }
    }

    private class UserModel
    {
        public string Login { get; set; } = "";
        public string Role { get; set; } = "User";
        public string? GitHubId { get; set; }
        public string? WalletAddress { get; set; }
    }

    private class AbiBytecodeModel
    {
        public string? Abi { get; set; }
        public string? Bytecode { get; set; }
    }
}
