@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime JS

<div class="main-container">
    <!-- Левая панель -->
    <div class="left-panel">
        <h3>Generate Smart Contract</h3>

        <input @bind="contractName" @bind:event="oninput" placeholder="Enter contract name" />

        <button class="custom-btn" @onclick="GenerateContract">Generate</button>

        @if (!string.IsNullOrWhiteSpace(responseMessage))
        {
            <div class="code-container">
                @if (isEditing)
                {
                    <textarea @bind="responseMessage" class="code-editor"></textarea>
                }
                else
                {
                    <pre><code class="language-solidity">@responseMessage</code></pre>
                }
                <button class="copy-btn" @onclick="CopyToClipboard">📋 Copy</button>
            </div>

            <!-- Блок кнопок -->
            <div class="button-container">
                <button class="custom-btn" disabled>Deploy</button>
                <button class="custom-btn" disabled>Audit</button>
                <button class="custom-btn" @onclick="RunTesting">Testing</button>
                <button class="custom-btn" @onclick="ToggleEdit">@editButtonText</button>
            </div>

            <!-- Поле вывода Testing -->
            @if (testingOutput.Count > 0)
            {
                <div class="output-container">
                    <pre><code class="language-shell">@string.Join("\n", testingOutput)</code></pre>
                </div>
            }
        }
    </div>

    <!-- Правая панель -->
    <div class="right-panel">
        <h3>Contract Parameters</h3>

        <!-- Выбор области применения -->
        <label>Area of Application:</label>
        <select @bind="selectedApplication">
            @foreach (var app in applicationOptions)
            {
                <option value="@app">@app</option>
            }
        </select>

        <!-- Включение событий -->
        <label>Enable Events:</label>
        <input type="checkbox" @bind="enableEvents" />

        <!-- Выбор типа uint -->
        <label>Storage for ID:</label>
        <select @bind="selectedUintType">
            @foreach (var uintType in uintOptions)
            {
                <option value="@uintType">@uintType</option>
            }
        </select>

        <!-- Опциональное поле void Label -->
        <label>Include void Label:</label>
        <input type="checkbox" @bind="includeVoidLabel" />
    </div>
</div>

@code {
    private string contractName = "";
    private string responseMessage = "";

    private bool isEditing = false;
    private string editButtonText = "Edit";
    private List<string> testingOutput = new();

    private string selectedApplication = "IoT";
    private bool enableEvents = true;
    private string selectedUintType = "uint256";
    private bool includeVoidLabel = true;

    private readonly List<string> applicationOptions = new() { "IoT", "Pharmaceutics", "Metallurgy" };
    private readonly List<string> uintOptions = new() { "uint8", "uint16", "uint32", "uint64", "uint128", "uint256" };

    private async Task GenerateContract()
    {
        Console.WriteLine("Кнопка нажата!");
        responseMessage = "Processing...";
        testingOutput.Clear();

        try
        {
            var fullUrl = $"{NavManager.BaseUri}api/contracts/generate?name={contractName}";
            var result = await Http.GetFromJsonAsync<ContractResponse>(fullUrl);
            responseMessage = $"Contract: {result.ContractName}, Code: {result.Code}";

            await JS.InvokeVoidAsync("highlightPrism");
        }
        catch (Exception ex)
        {
            responseMessage = $"Ошибка: {ex.Message}";
        }
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", responseMessage);
    }

    private async Task RunTesting()
    {
        testingOutput.Clear();
        testingOutput.Add("Running tests...");
        await Task.Delay(1000);

        testingOutput.Add("Test 1: ✔ Passed");
        testingOutput.Add("Test 2: ✔ Passed");
        testingOutput.Add("Test 3: ✘ Failed (Gas exceeded)");
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
        editButtonText = isEditing ? "Save" : "Edit";

        if (!isEditing)
        {
            Console.WriteLine("Edited contract saved: " + responseMessage);
        }
    }

    private class ContractResponse
    {
        public string ContractName { get; set; }
        public string Code { get; set; }
    }
}
