@page "/login"
@rendermode InteractiveServer
@inject AuthenticationStateProvider Auth
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject NavigationManager NavManager

<h3>Authentication</h3>

@if (!isAuthenticated)
{
    <div class="tab-container">
        <button class="@GetTabClass(true)" @onclick="() => SetTab(true)">Sign In</button>
        <button class="@GetTabClass(false)" @onclick="() => SetTab(false)">Sign Up</button>
    </div>

    @if (isSignIn)
    {
        <div class="auth-form">
            <input type="text" placeholder="Username" @bind="loginModel.Login" />
            <input type="password" placeholder="Password" @bind="loginModel.Password" />
            <label>
                <input type="checkbox" @bind="loginModel.RememberMe" /> Remember Me
            </label>
            <button class="auth-btn" @onclick="SignIn">Sign In</button>
        </div>
    }
    else
    {
        <div class="auth-form">
            <input type="text" placeholder="Username" @bind="registerModel.Login" />
            <input type="password" placeholder="Password" @bind="registerModel.Password" />
            <input type="email" placeholder="Email (optional)" @bind="registerModel.Email" />

            <button class="auth-btn" @onclick="SignUp">Sign Up</button>
            @if (!string.IsNullOrEmpty(registrationMessage))
            {
                <p class="error-message">@registrationMessage</p>
            }
        </div>
    }
}
else
{
    <div class="user-info">
        <h4>Welcome, @user.Login!</h4>
        <p>Role: <strong>@user.Role</strong></p>

        <button class="auth-btn" @onclick="ChangePassword">Change Password</button>

        @{
            var role = user.Role ?? "user";
            var showGitHub = AtLeast(role, "tester") && string.IsNullOrEmpty(user.GitHubId);
            var showMetaMask = AtLeast(role, "auditor") && (AllowManyWallets || string.IsNullOrEmpty(user.WalletAddress));
        }

        @if (showGitHub)
        {
            <button class="auth-btn" @onclick="ConnectGitHub">Connect GitHub</button>
        }
        @if (showMetaMask)
        {
            <button class="auth-btn" @onclick="ConnectMetaMask">Connect MetaMask</button>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }

        <button class="auth-btn logout" @onclick="Logout">Log Out</button>
    </div>
}

@code {
    private bool isAuthenticated = false;
    private bool isSignIn = true;
    private string registrationMessage = "";
    private string? errorMessage;

    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();
    private UserModel user = new();

    private const bool AllowManyWallets = false;

    protected override async Task OnInitializedAsync()
    {
        errorMessage = null;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("errorMessage", out var errorMsg))
        {
            errorMessage = errorMsg;
        }

        try
        {
            var state = await Auth.GetAuthenticationStateAsync();

            isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                user.Login = state.User.Identity!.Name!;
                user.Role = state.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "user";
                user.GitHubId = state.User.FindFirst("urn:github:login")?.Value;
                user.WalletAddress = state.User.FindFirst("urn:wallet:address")?.Value;
            }
        }
        catch (Exception ex)
        {
            var message = ex.Message;
            // На всякий случай, вдруг сервер вообще недоступен
            isAuthenticated = false;
        }
    }

    private void SetTab(bool signIn)
    {
        isSignIn = signIn;
        registrationMessage = "";
    }

    private string GetTabClass(bool signInTab) => isSignIn == signInTab ? "tab active" : "tab";

    private async Task SignIn()
    {
        try
        {
            // вызвать fetch(url, body) и получить UserModel
            user = await JS.InvokeAsync<UserModel>(
                "apiLogin",
                "/api/auth/login",
                loginModel
            );

            isAuthenticated = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Login failed: {ex.Message}");
        }
    }

    private async Task SignUp()
    {
        try
        {
            // вызвать fetch(url, body) и получить UserModel
            user = await JS.InvokeAsync<UserModel>(
                "apiLogin",
                "/api/auth/register",
                registerModel
            );

            isAuthenticated = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Register failed: {ex.Message}");
        }
    }

    private async Task ChangePassword()
    {
        var client = ClientFactory.CreateClient("with-cookies");
        await client.PostAsync("/api/auth/change-password", null);
    }

    private void ConnectGitHub()
    {
        NavManager.NavigateTo("/api/auth/link-github", forceLoad: true);
    }

    private async Task ConnectMetaMask()
    {
        try
        {
            var accounts = await JS.InvokeAsync<string[]>("myWeb3Functions.connectMetaMask");

            if (accounts.Length > 0)
            {
                // вернёт строку "MetaMask linked" или ошибку
                await JS.InvokeVoidAsync(
                    "apiLogin",
                    "/api/auth/link-metamask",
                    new { walletAddress = accounts[0] }
                );

                var state = await Auth.GetAuthenticationStateAsync();
                user.WalletAddress = accounts[0];
            }
            else
            {
                errorMessage = "MetaMask returned empty account list";
                Console.Error.WriteLine($"No metamask accounts");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"MetaMask error: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
        }
    }

    private void Logout()
    {
        NavManager.NavigateTo("/logout", forceLoad: true);
    }

    // порядок иерархии: user < tester < auditor < deployer < admin
    private static readonly string[] RoleRank =
        { "user", "tester", "auditor", "deployer", "admin" };

    private static bool AtLeast(string? role, string min)
    {
        if (role is null) return false;

        var idx = Array.IndexOf(RoleRank, role.Trim().ToLowerInvariant());
        var minIdx = Array.IndexOf(RoleRank, min.Trim().ToLowerInvariant());

        return idx >= 0 && idx >= minIdx;
    }

    private class LoginModel
    {
        public string Login { get; set; } = "";
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }

    private class RegisterModel
    {
        public string Login { get; set; } = "";
        public string Password { get; set; } = "";
        public string? Email { get; set; }
    }

    private class UserModel
    {
        public string Login { get; set; } = "";
        public string Role { get; set; } = "User";
        public string? GitHubId { get; set; }
        public string? WalletAddress { get; set; }
    }
}
