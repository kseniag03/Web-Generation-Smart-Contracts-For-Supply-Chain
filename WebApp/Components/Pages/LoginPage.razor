@page "/login"
@using Application.DTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@rendermode InteractiveServer
@inject AuthenticationStateProvider Auth
@inject IJSRuntime JS
@inject NavigationManager NavManager

<h3>Authentication</h3>

@if (errorMessages.Any())
{
	<div class="alert alert-danger" role="alert">
		<ul class="mb-0">
			@foreach (var err in errorMessages)
			{
				<li>@err</li>
			}
		</ul>
	</div>
}

@if (!isAuthenticated)
{
	<div class="tab-container">
		<button class="@GetTabClass(true)" @onclick="() => SetTab(true)">Sign In</button>
		<button class="@GetTabClass(false)" @onclick="() => SetTab(false)">Sign Up</button>
	</div>

	@if (isSignIn)
	{
		<div class="auth-form">
			<input type="text" placeholder="Username" @bind="loginDto.Login" />
			<input type="password" placeholder="Password" @bind="loginDto.Password" />
			<label>
				<input type="checkbox" @bind="loginDto.RememberMe" /> Remember Me
			</label>
			<button class="auth-btn" @onclick="SignIn">Sign In</button>
		</div>
	}
	else
	{
		<div class="auth-form">
			<input type="text" placeholder="Username" @bind="registerDto.Login" />
			<input type="password" placeholder="Password" @bind="registerDto.Password" />
			<input type="email" placeholder="Email (optional)" @bind="registerDto.Email" />

			<button class="auth-btn" @onclick="SignUp">Sign Up</button>
			@if (!string.IsNullOrEmpty(registrationMessage))
			{
				<p class="error-message">@registrationMessage</p>
			}
		</div>
	}
}
else
{
	<div class="user-info">
		<h4>Welcome, @userDto.Login!</h4>
		<p>Role: <strong>@(userDto.Role?.ToLower() ?? "user")</strong></p>

		<button class="auth-btn" @onclick="() => showPasswordForm = !showPasswordForm">Change Password</button>

		@if (showPasswordForm)
		{
			<div class="password-form">
				<div>
					<label>Old Password:</label>
					<input type="password" @bind="changePasswordDto.OldPassword" />
				</div>
				<div>
					<label>New Password:</label>
					<input type="password" @bind="changePasswordDto.NewPassword" />
				</div>
				<button class="auth-btn" @onclick="ChangePassword">Save</button>
			</div>
		}

		@{
			var role = userDto.Role?.ToLower() ?? "user";
			var showGitHub = AtLeast(role, "tester") && string.IsNullOrEmpty(userDto.GitHubId);
			var showMetaMask = AtLeast(role, "auditor") && (AllowManyWallets || string.IsNullOrEmpty(userDto.WalletAddress));
		}

		@if (showGitHub)
		{
			<button class="auth-btn" @onclick="ConnectGitHub">Connect GitHub</button>
		}
		@if (showMetaMask)
		{
			<button class="auth-btn" @onclick="ConnectMetaMask">Connect MetaMask</button>
		}

		<button class="auth-btn logout" @onclick="Logout">Log Out</button>
	</div>
}

@code {
	private bool isAuthenticated = false;
	private bool isSignIn = true;
	private bool showPasswordForm = false;
	private string registrationMessage = "";
	
	private List<string> errorMessages = new();

	private LoginDto loginDto = new();
	private RegisterDto registerDto = new();
	private ChangePasswordDto changePasswordDto = new();
	private UserDto userDto = new();

	private const bool AllowManyWallets = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			errorMessages.Clear();

			var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

			if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("errorMessage", out var errorMsgValues))
			{
				var msg = errorMsgValues.ToString();

				if (!string.IsNullOrEmpty(msg))
				{
					errorMessages.Add(msg);
				}
			}
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"[INIT FAIL] {ex.Message}");
		}

		try
		{
			var state = await Auth.GetAuthenticationStateAsync();

			isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

			if (isAuthenticated)
			{
				userDto.Login = state.User.Identity!.Name!;
				userDto.Role = state.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value?.ToLower() ?? "user";
				userDto.GitHubId = state.User.FindFirst("urn:github:login")?.Value;
				userDto.WalletAddress = state.User.FindFirst("urn:wallet:address")?.Value;
			}
		}
		catch (Exception ex)
		{
			isAuthenticated = false;
			Console.Error.WriteLine($"Auth failed: {ex.Message}");
		}
	}

	private void SetTab(bool signIn)
	{
		isSignIn = signIn;
		registrationMessage = "";
	}

	private string GetTabClass(bool signInTab) => isSignIn == signInTab ? "tab active" : "tab";

	private async Task SignIn()
	{
		errorMessages.Clear();

		try
		{
			userDto = await JS.InvokeAsync<UserDto>(
				"sendRequestViaBrowser",
				"/api/auth/login",
				loginDto
			);

			isAuthenticated = true;
		}
		catch (JSException jsEx)
		{
			isAuthenticated = false;
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			isAuthenticated = false;
			errorMessages.Add("Internal Error");
			Console.Error.WriteLine(ex);
		}
	}

	private async Task SignUp()
	{
		errorMessages.Clear();

		try
		{
			userDto = await JS.InvokeAsync<UserDto>(
				"sendRequestViaBrowser",
				"/api/auth/register",
				registerDto
			);

			isAuthenticated = true;
		}
		catch (JSException jsEx)
		{
			isAuthenticated = false;
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			isAuthenticated = false;
			errorMessages.Add("Internal Error");
			Console.Error.WriteLine(ex);
		}
	}

	private async Task ChangePassword()
	{
		errorMessages.Clear();

		try
		{
			_ = await JS.InvokeAsync<UserDto>(
				"sendRequestViaBrowser",
				"/api/auth/change-password",
				changePasswordDto
			);

			showPasswordForm = false;
		}
		catch (JSException jsEx)
		{
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			errorMessages.Add("Internal Error");
			Console.Error.WriteLine(ex);
		}
	}

	private void ConnectGitHub()
	{
		NavManager.NavigateTo("/api/auth/link-github", forceLoad: true);
	}

	private async Task ConnectMetaMask()
	{
		errorMessages.Clear();

		try
		{
			var accounts = await JS.InvokeAsync<string[]>("web3Functions.connectMetaMask");

			if (accounts.Length > 0)
			{
				await JS.InvokeVoidAsync(
					"sendRequestViaBrowser",
					"/api/auth/link-metamask",
					new MetaMaskDto { WalletAddress = accounts[0] }
				);

				var state = await Auth.GetAuthenticationStateAsync();
				userDto.WalletAddress = accounts[0];
			}
			else
			{
				errorMessages.Add("MetaMask returned empty account list");
				Console.Error.WriteLine($"No metamask accounts");
			}
		}
		catch (JSException jsEx)
		{
			HandleJsError(jsEx.Message);
		}
		catch (Exception ex)
		{
			errorMessages.Add("Internal Error");
			Console.Error.WriteLine(ex);
		}
	}

	private void Logout()
	{
		NavManager.NavigateTo("/logout", forceLoad: true);
	}

	// user < tester < auditor < deployer < admin
	private static readonly string[] RoleRank = { "user", "tester", "auditor", "deployer", "admin" };

	private static bool AtLeast(string? role, string min)
	{
		if (role is null) return false;

		var idx = Array.IndexOf(RoleRank, role.Trim().ToLowerInvariant());
		var minIdx = Array.IndexOf(RoleRank, min.Trim().ToLowerInvariant());

		return idx >= 0 && idx >= minIdx;
	}

	private void HandleJsError(string jsExMessage)
	{
		try
		{
			var problem = JsonSerializer.Deserialize<ValidationProblemDetails>(
				jsExMessage,
				new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
			);

			if (problem?.Errors != null && problem.Errors.Any())
			{
				errorMessages = problem.Errors
				.SelectMany(kv => kv.Value)
				.Select(m => m.Trim())
				.ToList();
			}
			else
			{
				errorMessages.Add(jsExMessage);
			}
		}
		catch
		{
			errorMessages.Add(jsExMessage);
		}

		Console.Error.WriteLine(jsExMessage);
	}
}
